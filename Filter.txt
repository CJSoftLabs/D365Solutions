var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};

var CJS;
(function (CJS) {	
    class CustomGenericRecordSource {
		recordsData = [];
		
		constructor(configdata) {
			this.configdata = configdata;
			CJS.FilterHelper.setRecordSourceConfig(this.configdata);
		}
		
        init(context) {
            this.context = context;
            this.SvgIconSrcPath = Xrm.Utility.getGlobalContext().getWebResourceUrl(CJS.FilterHelper.getRecordSourceConfig().SvgIconSrcPath);
            return Promise.resolve();
        }
        getRecordSourceInfo() {
            return { name: "CustomGenericRecordSource" };
        }
        getRecordsData(request, filter) {
            var _a;
            return __awaiter(this, void 0, void 0, function* () {
                let recordsData;
                if (!this.getRecordsDataPromise) {
                    this.getRecordsDataPromise = this.fetchAllRecords();
                }
                recordsData = yield this.getRecordsDataPromise;
				this.recordsData = recordsData;

                if (((_a = filter === null || filter === void 0 ? void 0 : filter.filterData) === null || _a === void 0 ? void 0 : _a.length) > 0) {
                    recordsData = CJS.FilterHelper.getRecordsFromSecondaryFilterApplied(recordsData, filter.filterData, filter.searchKey);
                } else if(filter.searchKey.length > 0) {
					recordsData = CJS.FilterHelper.filterRecordsBySearchString(recordsData, filter.searchKey);
				}
				
                this.orderRecordsData(recordsData, request.isAscending);
                let recordsAfterLastItem = [];
                if (request.lastItem) {
                    recordsAfterLastItem = this.getRecordsAfterLastItem(recordsData, request.lastItem);
                }
                else {
                    recordsAfterLastItem = recordsData;
                }
                let recordsDataCounted;
                if (request.pageSize > recordsAfterLastItem.length) {
                    recordsDataCounted = recordsAfterLastItem;
                }
                else {
                    recordsDataCounted = recordsAfterLastItem.slice(0, request.pageSize);
                }
                const recordResponse = {
                    requestId: request.requestId,
                    records: recordsDataCounted
                };
                return Promise.resolve(recordResponse);
            });
        }

        fetchAllRecords() {
            return __awaiter(this, void 0, void 0, function* () {
                let recordsData = [];
				
				try {
					const primaryId = this.context.page.entityId;
					//const filter="?$filter=cjs_accountid/accountid eq '{0}'"
					let filteredRawRecords = yield this.context.webAPI.retrieveMultipleRecords(CJS.FilterHelper.getRecordSourceConfig().PrimaryEntityLogicalName, CJS.String.formatString(CJS.FilterHelper.getRecordSourceConfig().RecordFilter, primaryId));
					if ((filteredRawRecords === null || filteredRawRecords === void 0 ? void 0 : filteredRawRecords.entities.length) != 0) {
						recordsData = this.processRecordsData(filteredRawRecords.entities);
					}
				} catch(error) { console.log(error); recordsData = []; }
                return recordsData;
            });
        }
        processRecordsData(rawRecordsData) {
            let recordsData = [];
			try {
				rawRecordsData === null || rawRecordsData === void 0 ? void 0 : rawRecordsData.forEach(element => {
					let recordData = {
						id: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.IdField],
						sortDateValue: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.SortDateField],
						data: JSON.stringify({
							id: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.IdField],
							name: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.NameField],
							filterFieldId: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.FilterIdField],
							filterFieldValue: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.FilterValueField],
							createdOn: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.CreatedOnField],
							modifiedOn: element[CJS.FilterHelper.getRecordSourceConfig().RecordFields.ModifiedOnField],
						})
					};
					recordsData.push(recordData);
				});
			} catch(error) { console.log(error); recordsData = []; }
            return recordsData;
        }
        getFilterDetails(filter) {
            return __awaiter(this, void 0, void 0, function* () {
				var filtersData = [];
				var recordsData = (this.recordsData !== undefined && this.recordsData !== null) ? this.recordsData : [];

				try {		
					if ((filter === null || filter === void 0 ? void 0 : filter.filterData) && filter.filterData.length > 0) {
						filtersData = CJS.FilterHelper.getFilterDetailsFilterApplied(filtersData, filter.filterData);
					}
					
					//Filter the records and use it for the filters
					recordsData = CJS.FilterHelper.getRecordsFromSecondaryFilterApplied(recordsData, filter.filterData, filter.searchKey);
					var isCustomRecordTypeSelected = false;
					
					//Retain the selection for the Record Type
					const filteredArray = filtersData.filter(item => item.name === "Module");
					if(filteredArray !== undefined && filteredArray !== null && filteredArray.length > 0) {
						const filteredOptions = filteredArray[0].options.filter(item => item.value === CJS.FilterHelper.getRecordSourceConfig().PrimaryEntityName);
						if(filteredOptions !== undefined && filteredOptions !== null && filteredOptions.length > 0) {
							isCustomRecordTypeSelected = ((filteredOptions[0].isSelected === undefined || filteredOptions[0].isSelected === null) ? false : filteredOptions[0].isSelected);
						}
					}

					// add modifieddate group data to filterDetails
					//let modifiedDateGroup = CJS.FilterHelper.getModifiedDateFilterDetails(recordsData);
					//if (modifiedDateGroup.options && modifiedDateGroup.options.length > 0) {
					//	filtersData.push(modifiedDateGroup);
					//}
					
					//Prepare the Filter options
					const filterOptions = recordsData.reduce((acc, item) => {
						const record = JSON.parse(item.data);
						if (!acc[record.filterFieldId]) {
							acc[record.filterFieldId] = {
								value: record.filterFieldId,
								label: record.filterFieldValue,
								count: 1
						};
						} else {
							acc[record.filterFieldId].count += 1;
						}
						return acc;
					}, {});

					//Prepare the Filter data
					filtersData = [
						{
							// #1 - new filter type in existing filter group 'Record Type'
							name: "Module",
							type: "MultiSelect",
							options: [
								{
									value: CJS.FilterHelper.getRecordSourceConfig().PrimaryEntityName,
									label: CJS.FilterHelper.getRecordSourceConfig().FilterLabel,
									count: recordsData.length,
									isSelected: isCustomRecordTypeSelected,
								},
							],
						},
						{
							// #2 - new custom filter group
							name: CJS.FilterHelper.getRecordSourceConfig().PrimaryEntityName,
							label: CJS.FilterHelper.getRecordSourceConfig().FilterLabel,
							type: "MultiSelect",
							isExpanded: true,
							options: Object.values(filterOptions),
						},
					];
					
					//When there is a filter based on text, followed by selection of a child type, then deselection of it removes the parent record type.
					if(!filtersData.some(item => item.name === "Module")) {
						filtersData.push(						{
							// #1 - new filter type in existing filter group 'Record Type'
							name: "Module",
							type: "MultiSelect",
							options: [
								{
									value: CJS.FilterHelper.getRecordSourceConfig().PrimaryEntityName,
									label: CJS.FilterHelper.getRecordSourceConfig().FilterLabel,
									count: recordsData.length,
									isSelected: isCustomRecordTypeSelected,
								},
							],
						});
					}						
					CJS.FilterHelper.setFilterData(filtersData);
				}catch(error) { console.log(error); filtersData = [];}
				
				return Promise.resolve(filtersData);
            });
        }
        getRecordUX(recordData, recordState) {
            return this.buildRecordUX(recordData, recordState.isExpanded);
        }
        getRecordsAfterLastItem(recordsData, lastItem) {
            const lastItemIndex = recordsData.findIndex((item) => item.id == lastItem.id);
            return recordsData.slice(lastItemIndex + 1);
        }
        buildRecordUX(recordData, isExpanded) {
			if(!CJS.UxUtilities.isComponentFactorySet()) {
				CJS.UxUtilities.setComponentFactory(this.context.factory);
			}
            const recordId = recordData.id;
            const sortDateValue = recordData.sortDateValue;
            const parsedRecordDetails = JSON.parse(recordData.data);
			this.configdata.Commands[0].href = CJS.String.formatString("" + this.configdata.Commands[0].href, parsedRecordDetails.id);
			const commandComponents = this.configdata.Commands;
			
			const headerComponents = [CJS.UxUtilities.createCardComponent(parsedRecordDetails, this.configdata.HeaderConfig, "header")];
            const bodyComponents = [CJS.UxUtilities.createCardComponent(parsedRecordDetails, this.configdata.BodyConfig, "body")];
			const footerComponents = [CJS.UxUtilities.createCardComponent(parsedRecordDetails, this.configdata.FooterConfig, "footer")];
            //const footerComponents = [CJS.UxUtilities.createFooterComponent(recordId, parsedRecordDetails.createdOn, isExpanded)];
			const icon = this.configdata.RecordIcon;
			
            // example of use custom icon component
            const bubbleIcon = recordId.includes("D365") && CJS.UxUtilities.createIconComponent(recordId, this.SvgIconSrcPath);
            const headerIcon = recordId.includes("D365") && CJS.UxUtilities.createIconComponent(recordId, this.SvgIconSrcPath);
            const moduleName = this.getModuleName();
            const timelineRecord = {
                id: recordId,
                commands: commandComponents,
                moduleName: moduleName,
                header: { components: headerComponents },
                body: { components: bodyComponents },
                footer: { components: footerComponents },
                accessibleName: "CustomGenericDataSource Record: " + recordId,
                sortDateValue,
                icon,
                bubbleIcon,
                headerIcon,
            };
            return timelineRecord;
        }
        getModuleName() {
            return "CustomGenericDataSource";
        }
        // non-robust orderRecordsData
        orderRecordsData(recordsData, isAscending) {
            if (isAscending) {
                recordsData.sort((a, b) => {
                    return a.sortDateValue && b.sortDateValue
                        ? new Date(a.sortDateValue).getTime() - new Date(b.sortDateValue).getTime()
                        : 0;
                });
            }
            else {
                recordsData.sort((a, b) => {
                    return a.sortDateValue && b.sortDateValue
                        ? new Date(b.sortDateValue).getTime() - new Date(a.sortDateValue).getTime()
                        : 0;
                });
            }
        }
    }
    CJS.CustomGenericRecordSource = CustomGenericRecordSource;

    class FilterHelper {
        static getFilterDetailsFilterApplied(allFiltersData, requestFilterData) {
            let selectedFilterModules = [];
            let filteredData = [];
            let childModules = this.getChildModulesSelected(requestFilterData);
            requestFilterData === null || requestFilterData === void 0 ? void 0 : requestFilterData.forEach((group) => {
                var _a;
                (_a = group.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
                    if (option.isSelected && !selectedFilterModules.some((x) => x === group.name)) {
                        selectedFilterModules.push(group.name);
                    }
                });
            });
            selectedFilterModules === null || selectedFilterModules === void 0 ? void 0 : selectedFilterModules.forEach((element) => {
                let matchedRecords = allFiltersData.filter((data) => {
                    return data.name == element;
                });
                filteredData = filteredData.concat(matchedRecords);
            });
            // if parent module alone selected add child filter groups
            if ((childModules === null || childModules === void 0 ? void 0 : childModules.length) > 0) {
                filteredData = filteredData.concat(this.updateChildModuleFilterData(childModules));
            }
            else {
				requestFilterData = this.updateRequestFilterData(requestFilterData);
                this.updateParentModuleFilterData(filteredData, selectedFilterModules, requestFilterData);
            }
            return filteredData;
        }		
		static updateRequestFilterData(requestFilterData) {
			try {
				this.FilterData === null || this.FilterData === void 0 ? void 0 : this.FilterData.forEach((element) => {
					if(!requestFilterData.some((x) => x.name === element.name)) {
						requestFilterData.push(element);
					}
				});
				return requestFilterData;
			} catch(error) { console.log(error); }
		}
        static getRecordsFromSecondaryFilterApplied(recordsData, filterData, searchKey) {
            let filterKey = [];
			let hasOtherFilter = false;
			let hasSourceFilter = false;
			
			if(searchKey.length > 0) {
				recordsData = this.filterRecordsBySearchString(recordsData, searchKey);
			}

            filterData === null || filterData === void 0 ? void 0 : filterData.forEach((group) => {
                var _a;
                (_a = group.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
					if (option.isSelected) {
						if(group.name == "Module") {
							if(option.value == this.getRecordSourceConfig().PrimaryEntityName) {
								hasSourceFilter = true;
							} else {
								hasOtherFilter = true;
							}
						} else if(group.name == this.getRecordSourceConfig().PrimaryEntityName) {
							filterKey.push(option.value);
						}
                    }
                });
            });

			if (filterKey.length === 0) {
				if (this.isParentModuleSelected(filterData)) {
					if(hasSourceFilter) {
						return recordsData;
					} else if(hasOtherFilter) {
						return [];
					}
				} else {
					return recordsData;
				}
			}
			else {
				let filteredRecords = [];
				filterKey === null || filterKey === void 0 ? void 0 : filterKey.forEach((element) => {
					let matchedRecords;
					matchedRecords = recordsData.filter((record) => {
						return JSON.parse(record.data).filterFieldId.toString().toLowerCase().indexOf(element.toString().toLowerCase()) > -1;
					});
					filteredRecords = filteredRecords.concat(matchedRecords);
				});
				return filteredRecords;
			}
        }
		static filterRecordsBySearchString(data, searchString) {
			return data.filter(item => {
				return Object.keys(item).some(key => {
					return item[key].toString().toLowerCase().includes(searchString.toLowerCase());
				});
			});
		}
        static isParentModuleSelected(requestFilterData) {
            let isSelected = false;
            requestFilterData === null || requestFilterData === void 0 ? void 0 : requestFilterData.forEach((group) => {
                var _a;
                (_a = group.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
                    if (option.isSelected && group.name == "Module") {
                        isSelected = true;
                    }
                });
            });
            return isSelected;
        }
        static getChildModulesSelected(requestFilterData) {
            let childModules = [];
            requestFilterData === null || requestFilterData === void 0 ? void 0 : requestFilterData.forEach((group) => {
                var _a;
                (_a = group.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
                    if (option.isSelected) {
                        if (group.name == "Module") {
                            childModules.push(option.value);
                        }
                        if (group.name.indexOf(this.getRecordSourceConfig().PrimaryEntityName) > -1) {
                            childModules = childModules.filter((x) => x !== this.getRecordSourceConfig().PrimaryEntityName);
                        }
                    }
                });
            });
            return childModules;
        }
        static getModifiedDateFilterDetails(recordsData) {
            // Last7Days
            const lastWeekDate = new Date();
            lastWeekDate.setDate(lastWeekDate.getDate() - 7);
            // Last30Days
            const lastMonthDate = new Date();
            lastMonthDate.setDate(lastMonthDate.getDate() - 30);
            //Last24Hours
            const lastDayDate = new Date();
            lastDayDate.setDate(lastDayDate.getDate() - 1);
            let last7daysCount = 0;
            let last30daysCount = 0;
            let last24HoursCount = 0;
            recordsData.forEach((data) => {
                let currentRecordDate = new Date(data.sortDateValue);
                if (lastDayDate <= currentRecordDate) {
                    last24HoursCount++;
                    last7daysCount++;
                    last30daysCount++;
                }
                else if (lastWeekDate <= currentRecordDate) {
                    last7daysCount++;
                    last30daysCount++;
                }
                else if (lastMonthDate <= currentRecordDate) {
                    last30daysCount++;
                }
            });
            let modifiedDateFilterData = {
                name: "TLG" /* ModifiedDate */,
                type: "MultiSelect" /* MultiSelect */,
                options: [],
            };
            if (last24HoursCount > 0) {
                modifiedDateFilterData.options.push({
                    value: "Last24Hours" /* Last24Hours */,
                    count: last24HoursCount,
                });
            }
            if (last7daysCount > 0) {
                modifiedDateFilterData.options.push({
                    value: "Last7Days" /* Last7Days */,
                    count: last7daysCount,
                });
            }
            if (last30daysCount > 0) {
                modifiedDateFilterData.options.push({
                    value: "Last30Days" /* Last30Days */,
                    count: last30daysCount,
                });
            }
            return modifiedDateFilterData;
        }
        static updateParentModuleFilterData(filteredData, selectedFilterModules, requestFilterData) {
            if (selectedFilterModules.indexOf("Module") == -1) {
				var formFilterData = CJS.FilterHelper.getFilterData();
				formFilterData === null || formFilterData === void 0 ? void 0 : formFilterData.forEach((element) => {
					filteredData.push(element);
				});
            }
            // adjust module counts
            requestFilterData === null || requestFilterData === void 0 ? void 0 : requestFilterData.forEach((group) => {
                var _a;
                let isFirstIteration = true;
                if (group.name.indexOf(this.getRecordSourceConfig().PrimaryEntityName) > -1) {
                    (_a = group.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
                        if (option.isSelected) {
                            this.updateSelectedParentModuleValues(group.name, option.count, isFirstIteration, filteredData);
                            isFirstIteration = false;
                        }
                    });
                }
            });
        }
        static updateSelectedParentModuleValues(name, count, isFirstIteration, filteredData) {
            var _a;
			if(filteredData !== undefined && filteredData !== null && filteredData.length > 0) {
				(_a = filteredData.filter((data) => {
					return data.name == "Module";
				})[0]
					.options) === null || _a === void 0 ? void 0 : _a.forEach((option) => {
					if (name.indexOf(option.value) > -1) {
						option.count = isFirstIteration ? count : option.count + count;
						option.isSelected = true;
					}
				});
			}
        }
		
        static updateChildModuleFilterData(childModules) {
            let childGroups = [];
            let allFiltersData = CJS.FilterHelper.getFilterData();
            childModules === null || childModules === void 0 ? void 0 : childModules.forEach((module) => {
                childGroups = childGroups.concat(allFiltersData.filter((x) => {
                    return x.name.indexOf(module) > -1;
                }));
            });
            return childGroups;
        }

		static setRecordSourceConfig(config) {
			this.RecordSourceConfig = config;
		}
		static getRecordSourceConfig() {
			return this.RecordSourceConfig;
		}
        static setFilterData(oFilterData) {
			this.FilterData = oFilterData;
        }
        static getFilterData() {
			return this.FilterData;
        }
        static getRecordCount() {
			return ((this.RecordCount !== undefined && this.RecordCount !== null) ? this.RecordCount : 0);
        }
        static setFilterOptionData(oFilterOptionData, iRecordCount) {
			this.FilterOptionData = oFilterOptionData;
			this.RecordCount = iRecordCount;
        }
        static getFilterOptionData() {
			return this.FilterOptionData;
        }
        static isFilterOptionDataLoaded() {
			return (this.FilterOptionData !== null && this.FilterOptionData !== undefined);
        }
    }
    CJS.FilterHelper = FilterHelper;

    class UxUtilities {
		static setComponentFactory(factory) {
			this.componentfactory = factory;
		}
		static isComponentFactorySet() {
			return !(this.componentfactory === null || this.componentfactory === undefined);
		}
        static createIconComponent(recordId, iconSource, style) {
            const imgProps = {
                id: recordId,
                source: iconSource,
                style: style,
            };
            return this.componentfactory.createElement("IMG", imgProps);
        }
		static createHtmlComponent(elementType, key, value) {
			return this.componentfactory.createElement(elementType, { key: key, }, value);
		}
        static createCardComponent(record, componentConfig, componentType) {
			let childElements = [];
			componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.forEach(el => {
				switch(el.elementType.toLowerCase()) {
					case "label":
					case "container":
						childElements.push(this.createHtmlComponent(el.elementType, CJS.String.formatString("CustomGenericDataSource_{0}_{1}_{2}_{3}", record.id, componentType, el.sequence, el.name), this.getFormattedValue(record, el)));
						break;
					case "crmicon":
					case "img":
						childElements.push(this.createIconComponent(CJS.String.formatString("CustomGenericDataSource_{0}_{1}_{2}_{3}", record.id, componentType, el.sequence, el.name), el.value, { height: el.height, width: el.width }));
						break;
				}
			});
			
			return this.createHtmlComponent("container", ("CustomGenericDataSource_" + record.id + "_header_container"), (childElements.length > 0) ? childElements : []);
        }
		static getFormattedValue(record, componentConfig) {
			var returnValue = "";
			switch(componentConfig.dataType.toLowerCase()){
				case "datetime":
					returnValue = CJS.DateUtilities.formatDateString(record[componentConfig.value], componentConfig.format);
					break;
				case "string":
					returnValue = ((componentConfig.includeSpace ?? false) ? " " : "") + record[componentConfig.value];
					break;
				case "directstring":
					returnValue = "" + componentConfig.value;
					break;
				case "none":
					returnValue = "";
					break;
			}
			
			return returnValue;
		}
    }
    CJS.UxUtilities = UxUtilities;

    class String {
        static formatString() {
			var args = arguments;
			return args[0].replace(/{(\d+)}/g, function(match, number) { 
				return typeof args[Number(number) + 1] != 'undefined'
					? args[Number(number) + 1] 
					: match;
			});
		}
    }
    CJS.String = String;

	class DateUtilities {
		static options = {
			year: 'numeric',
			month: '2-digit',
			day: '2-digit',
			hour: '2-digit',
			minute: '2-digit',
			second: '2-digit',
			hour12: true,
		};

		static formatDateString(isoString, locale) {
			const date = new Date(isoString);
			return date.toLocaleDateString(locale, DateUtilities.options).toUpperCase().replace(",", "");
		}
	}
    CJS.DateUtilities = DateUtilities;
	
    class PostActivityRecordSource extends CJS.CustomGenericRecordSource {
		constructor() {
			console.log("PostActivityRecordSource - Constructor");
			super({
				SvgIconSrcPath: "msdyn_cec_Available.svg",
				PrimaryEntityName: "PostActivity",
				PrimaryEntityLogicalName: "cjs_postactivity",
				RecordFilter: "?$filter=cjs_accountid/accountid eq '{0}'",
				FilterLabel: "Post Activities",
				RecordFields: {
					IdField: "cjs_postactivityid",
					SortDateField: "cjs_createdon",
					NameField: "cjs_postactivityname",
					FilterIdField: "cjs_postactivitytype",
					FilterValueField: "cjs_postactivitytype@OData.Community.Display.V1.FormattedValue",
					CreatedOnField: "cjs_createdon",
					ModifiedOnField: "cjs_createdon",
				},
				RecordIcon: {
					type: 205,
					accessibleName: "CustomGenericDataSource icon accessibleName",
				},
				Commands: [
					{
						iconType: 257,
						label: "Open Record",
						command: "open",
						commandType: "HYPERLINK",
						href: "/main.aspx?pagetype=entityrecord&etn=cjs_postactivity&id={0}",
					},
				],
				HeaderConfig: [
					{
						elementType: "label",
						sequence: 1,
						dataType: "directstring",
						value: "Event Date: ",
						name: "modifiedonlabel",
					},
					{
						elementType: "label",
						sequence: 2,
						dataType: "datetime",
						value: "modifiedOn",
						format: "en-GB",
						name: "modifiedonvalue",
					},
					{
						elementType: "container",
						sequence: 3,
						dataType: "none",
						name: "newline",
					},
					{
						elementType: "img",
						sequence: 4,
						value: "https://picsum.photos/200",
						height: "16px",
						width: "16px",
						name: "cardicon",
					},
					{
						elementType: "label",
						sequence: 5,
						dataType: "string",
						includeSpace: true,
						value: "name",
						name: "titlelabel",
					},
				],
				BodyConfig: [
					{
						elementType: "label",
						sequence: 1,
						dataType: "string",
						value: "filterFieldValue",
						name: "contentlabel",
					},
					// {
						// elementType: "container",
						// sequence: 2,
						// dataType: "none",
						// name: "newline",
					// },
					// {
						// elementType: "label",
						// sequence: 3,
						// dataType: "directstring",
						// value: "Event Date: ",
						// name: "modifiedonlabel",
					// },
					// {
						// elementType: "label",
						// sequence: 4,
						// dataType: "datetime",
						// value: "modifiedOn",
						// format: "en-GB",
						// name: "modifiedonvalue",
					// },
				],
				FooterConfig: [
					{
						elementType: "label",
						sequence: 1,
						dataType: "directstring",
						value: "Created On: ",
						name: "modifiedonlabel",
					},
					{
						elementType: "label",
						sequence: 2,
						dataType: "datetime",
						value: "modifiedOn",
						format: "en-GB",
						name: "modifiedonvalue",
					},
					{
						elementType: "container",
						sequence: 3,
						dataType: "none",
						name: "newline",
					},
					{
						elementType: "label",
						sequence: 4,
						dataType: "directstring",
						value: "Modified On: ",
						name: "modifiedonlabel",
					},
					{
						elementType: "label",
						sequence: 5,
						dataType: "datetime",
						value: "modifiedOn",
						format: "en-GB",
						name: "modifiedonvalue",
					},
				]
			});
		}
	}
    CJS.PostActivityRecordSource = PostActivityRecordSource;
})(CJS || (CJS = {}));
